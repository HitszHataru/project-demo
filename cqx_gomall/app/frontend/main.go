// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/MrLittle05/Gomall/app/frontend/biz/router"
	frontutils "github.com/MrLittle05/Gomall/app/frontend/biz/utils"
	"github.com/MrLittle05/Gomall/app/frontend/conf"
	"github.com/MrLittle05/Gomall/app/frontend/infra/rpc"
	"github.com/MrLittle05/Gomall/app/frontend/middleware"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	rpc.Init()
	address := conf.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})

	router.GeneratedRegister(h)
	h.LoadHTMLGlob("template/*")
	h.Static("/static", "./")

	// 用于注册一个处理特定路径（在此处为 /sign-in）的 HTTP GET 请求的处理器
	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		data := utils.H{
			"Title": "Sign In",
			"Next":  ctx.Query("next"),
		}
		ctx.HTML(consts.StatusOK, "sign-in", frontutils.WarpResponse(c, ctx, data))
	})

	h.GET("/sign-up", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "sign-up", frontutils.WarpResponse(c, ctx, utils.H{"Title": "Sign Up"}))
	})

	h.GET("/about", middleware.Auth(), func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "about", frontutils.WarpResponse(c, ctx, utils.H{"Title": "About"}))
	})

	h.GET("/checkout/failed", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "fail", frontutils.WarpResponse(c, ctx, utils.H{"Title": "Checkout Failed"}))
	})

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// https://github.com/hertz-contrib/sessions
	store, err := redis.NewStore(10, "tcp", conf.GetConf().Redis.Address, "", []byte(os.Getenv("SESSION_SECRET")))
	if err != nil {
		log.Fatalf("Error creating Redis session store: %v", err)
	}
	h.Use(sessions.New("cloudwego-shop", store))
	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

	// custom middleware
	middleware.Register(h)
}
